3.4	实时日志打印及分发通道
Breeze框架是一个web框架，传统的web框架是基于页面查询数据库数据并显示给用户，在硬件测试活动中，有很多需要实时反馈信息的场景，用户要能立即看到设备的反馈信息，要求延时小于1s，为了支持这个需求，Breeze设计了一个实时日志打印通道来获取用户在线下执行机上打印的日志，推送到用户的网页前端页面上。

每一条实时日志在执行机上产生后，被送入kafka MQ的生产者通道，然后被日志服务器读取，存放在redis数据库中，每一个日志都有一个测试序列号，当用户打开日志页面时，将在页面和log服务器之间建立一个web socket连接，并把自己当前的测试序列号发送到日志服务器上注册，日志服务器收到kafka MQ发来的消息时，检测当前连接池是否有相应的测试序列号，如果有，在把消息存入数据库的同时，直接转发到web socket连接上，用户在自己的页面上将会看到实时推送的日志。
设计的难点在于实时日志数据量较大，多用户同时查看的话会对服务器造成较大压力，此处不使用数据库查询作为日志的来源，而是使用MQ，这样就避免了海量数据的查询带来的压力，只做简单的路由转发，大大降低了服务器压力。

3.8	应用商店
3.8.1	应用商店概述
为了实现自动化的One Track单一分支，Breeze框架设计了应用商店实现，实现组件、模块的线上管理，客户端的python功能模块被分为APP和基础包两类组件，APP是实现测试业务所需的AW函数包，基础组件是系统提供的类似socket、visa、telnet等仪表通信需要的部件。
Breeze框架与客户端是基于RPC通讯进行联系的，采用反射方式加载客户端的APP和基础组件，这些组件平时存放在服务器上，当用户在服务端的APP商店在线安装这些组件时，他们才会被下载到客户端并被自动安装到python执行环境中，也就是说，一般用户是不能随意修改代码的，这样就实现了对一般修改的防护。脱离服务端客户端代码不能单独运行，在服务端可以强制检测代码的修改以及与库上代码的同步情况，这部分工作可以由git完成。


3.10.2	数据库设计和维护
框架大部分结构化数据采用mysql数据库，非结构化数据采用MongoDB和Redis数据库，MongoDB用于保存各种难以归一结构化的测试数据，Redis当前主要用于保存实时日志。在mysql数据库中有部分表格数据量增长较快，已经采取了水平分表机制进行扩展，确保2~3年不需要修改数据库结构，为了随着业务量的增长，可能需要把这一部分数据量较大的表格进行分布式存储的整改。


4	开发环境
JAVA JDK 1.8
Spring Boot 1.5.2
Maven 3.4
Intellij IDEA 2018
JQuery
VUE
MySql 8.0
MongoDB 
Redis
