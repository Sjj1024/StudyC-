2.2	Breeze运行环境说明

Breeze是一个微服务框架，采用JAVA + Spring Boot集成开发，主要有前端UI服务、各种业务执行器服务、日志服务、应用商店、数据分析服务、权限校验服务等，需要部署在3~4台服务器上，服务部署采用tomcat，数据库采用mysql。

3.2.4	执行机与RPC控制
Breeze的测试逻辑不放在传统的python客户端，目的是为了最大限度减小客户端的复杂度，因为测试活动中需要的通用控制逻辑已经被抽象到云上的主干中，客户端需要做的是控制仪表、被测件，大部分时间并不需要实现复杂的用例逻辑，服务端的测试流程（用例逻辑）叫做TestProcess，由一系列AOT拦截器构成（后面将会重点描述），服务端和客户端的通讯依靠远程调用机制来完成，这样在开发测试流程时依然像在本地代码上执行，避免了复杂的网络通讯对测试逻辑的干扰。客户端在启动之后，会成为RPC的服务器，并在启动时向服务端注册自己，上报IP地址，软件版本等信息，服务端就可以根据这些信息访问客户端开放的RPC服务了。


3.3.1	Breeze框架分层控制机制的设计
传统脚本开发的自动化流程用来解决上面的复杂场景时，往往迅速变成各种功能的条件-跳转网络，最终导致代码变成难以控制的泥潭，这样的代码很常见，究其原因，实际上是对OOP面向对象思想、对封装等设计模式的无视（或者不明白）导致的，往往我们开发代码的工程师忙于解决具体的业务诉求，在堆业务代码、功能代码，没有时间按照更安全更合理的方式设计或者重构，Breeze框架通过设计一个硬件控制的模型来分解复杂的控制逻辑，让即使不愿花时间考虑设计模式的工程师也可以开发相对安全可靠的硬件测试控制代码。
Breeze框架的硬件分层控制机制参考了windows WDM驱动程序设计，采用分层方式管理不同的硬件或者事件逻辑，这些分层构成了一个filter链，控制消息或者事件总是依次通过这些分层，并在需要的分层上进行处理，各层之间既可以按部就班的顺序处理，也可以在一些特殊情况下通过消息进行同步，这样就保证了正常顺序处理流程和异常的突发响应机制。Breeze的分层机制被命名为AOT（Aspect Of Testing），测试切面。

3.3.2	AOT分层的组织形式
划分控制层的原则就是功能内聚，当一个复杂的控制系统中有多个设备或者事件逻辑时，每个设备或者事件逻辑的处理放在一个分层（AOT）中，在AOT中，收集所有处理自身业务需要的信息（并且只收集相关信息），处理后输出结果给后级，一般并不需要从后级获取反馈，非常像是“各扫门前雪”的工作模式。例如测试任务信息作为输入，传入到第一层AOT，负责测试工位初始化的层，这一层讲从测试任务信息中读取多有工位初始化需要的信息：仪表IP、电源的设定值等，并把相应的初始化工作做完，然后把信息传递到第二层AOT，第二层AOT是负责检查手机电量，这一层会读取手机信息并获取电量，判断是否需要充电，随后把数据再传递到第三层…依次类推，知道全部测试逻辑被处理完成。
